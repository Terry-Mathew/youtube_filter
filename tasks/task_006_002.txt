TASK_006_002: Implement YouTube API key validation logic

DESCRIPTION:
Create validation service for YouTube Data API v3 keys including format validation, test API calls, quota verification, and connection status feedback. This service will ensure API keys are valid and functional before storage.

DEPENDENCIES:
- TASK_006_001 (ApiKeySetup component) - Component will use this validation logic

ANTICIPATES:
- TASK_007 (YouTube API integration) - Will use validated keys for video fetching

FILES TO MODIFY:
1. src/lib/youtube-validation.ts
   - New validation service for YouTube API keys
   - Format validation functions
   - Test API call implementations
   - Quota monitoring functions
   - Error handling and user feedback

2. src/components/ApiKeySetup.tsx
   - Integrate validation service
   - Add real-time validation feedback
   - Display validation results

IMPLEMENTATION DETAILS:

1. YouTube API Key Validation Service:
   ```typescript
   export interface ValidationResult {
     isValid: boolean;
     error?: string;
     quotaInfo?: {
       dailyLimit: number;
       used: number;
       remaining: number;
     };
     keyInfo?: {
       type: 'browser' | 'server' | 'android' | 'ios';
       restrictions: string[];
     };
   }

   export class YouTubeValidationService {
     async validateApiKey(key: string): Promise<ValidationResult>;
     async testConnection(key: string): Promise<boolean>;
     validateFormat(key: string): boolean;
     async getQuotaInfo(key: string): Promise<QuotaInfo>;
   }
   ```

2. Format Validation:
   - YouTube API keys start with "AIza"
   - Length validation (39 characters)
   - Character set validation (alphanumeric + hyphens/underscores)
   - Real-time format feedback

3. Connection Testing:
   - Test API call to YouTube Data API v3
   - Use minimal quota operation (e.g., channels.list with mine=true)
   - Handle various error responses:
     - Invalid API key
     - Quota exceeded
     - API not enabled
     - Restricted key
     - Network errors

4. Quota Monitoring:
   - Check current quota usage
   - Display remaining quota
   - Warning for low quota
   - Daily reset time information

5. Error Handling:
   ```typescript
   export enum ValidationError {
     INVALID_FORMAT = 'Invalid API key format',
     INVALID_KEY = 'API key is not valid',
     QUOTA_EXCEEDED = 'Daily quota exceeded',
     API_NOT_ENABLED = 'YouTube Data API v3 not enabled',
     RESTRICTED_KEY = 'API key has restrictions',
     NETWORK_ERROR = 'Network connection error',
     UNKNOWN_ERROR = 'Unknown validation error'
   }
   ```

6. YouTube Data API v3 Test Implementation:
   ```typescript
   async testYouTubeConnection(apiKey: string): Promise<ValidationResult> {
     try {
       const response = await fetch(
         `https://www.googleapis.com/youtube/v3/channels?part=snippet&mine=true&key=${apiKey}`
       );
       
       if (response.status === 200) {
         return { isValid: true };
       } else if (response.status === 400) {
         return { isValid: false, error: ValidationError.INVALID_KEY };
       } else if (response.status === 403) {
         const errorData = await response.json();
         if (errorData.error.errors[0].reason === 'quotaExceeded') {
           return { isValid: false, error: ValidationError.QUOTA_EXCEEDED };
         }
       }
     } catch (error) {
       return { isValid: false, error: ValidationError.NETWORK_ERROR };
     }
   }
   ```

INTEGRATION WITH COMPONENT:

1. Real-time Validation:
   - Validate format as user types
   - Debounced API validation
   - Visual feedback (green/red indicators)

2. Test Button Functionality:
   - Loading state during test
   - Success/error feedback
   - Detailed error messages

3. Validation States:
   ```typescript
   type ValidationState = 
     | 'idle'
     | 'validating'
     | 'valid'
     | 'invalid'
     | 'testing'
     | 'test-success'
     | 'test-failed';
   ```

VALIDATION CRITERIA:
- ✓ Format validation works for YouTube API keys
- ✓ Test API calls successfully validate keys
- ✓ Quota information is retrieved and displayed
- ✓ All error scenarios are handled gracefully
- ✓ Validation feedback is immediate and clear
- ✓ Network errors are handled properly
- ✓ TypeScript types are comprehensive
- ✓ Service is testable and maintainable

SECURITY CONSIDERATIONS:
- API keys are not logged or stored in plaintext during validation
- Test calls use minimal quota
- Error messages don't expose sensitive information
- Network requests are properly secured

INTEGRATION NOTES:
- Service designed for reuse with other API validation needs
- Error handling integrates with global error management
- Quota monitoring prepares for usage analytics (TASK_017)
- Validation results help with user onboarding experience 