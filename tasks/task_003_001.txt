# TASK_003_001: Create CategoryForm component with shadcn UI

## Overview
Build a reusable form component for creating and editing categories using shadcn/ui components. The form should handle both create and edit modes with proper validation, error handling, and TypeScript safety.

## Acceptance Criteria
- [ ] CategoryForm component with create/edit modes
- [ ] Form validation using Zod schema and react-hook-form
- [ ] shadcn/ui Dialog, Form, Input, Button, Textarea components
- [ ] Real-time validation with error messages
- [ ] Proper TypeScript interfaces and types
- [ ] Responsive design for mobile and desktop
- [ ] Integration with Zustand store actions
- [ ] Color picker for category colors
- [ ] Loading states during form submission

## Technical Requirements

### Component Interface:
```typescript
interface CategoryFormProps {
  category?: Category;
  isOpen: boolean;
  onClose: () => void;
  onSuccess?: (category: Category) => void;
}

interface CategoryFormData {
  name: string;
  description: string;
  criteria: string;
  color: CategoryColor;
  icon?: string;
  tags: string[];
}
```

### Validation Schema:
```typescript
import { z } from "zod";
import { MAX_CATEGORY_NAME_LENGTH, MAX_CATEGORY_DESCRIPTION_LENGTH, MAX_CATEGORY_CRITERIA_LENGTH } from "@/types";

const categoryFormSchema = z.object({
  name: z.string()
    .min(1, "Category name is required")
    .max(MAX_CATEGORY_NAME_LENGTH, `Name must be less than ${MAX_CATEGORY_NAME_LENGTH} characters`),
  description: z.string()
    .min(1, "Description is required")
    .max(MAX_CATEGORY_DESCRIPTION_LENGTH, `Description must be less than ${MAX_CATEGORY_DESCRIPTION_LENGTH} characters`),
  criteria: z.string()
    .min(1, "Search criteria is required")
    .max(MAX_CATEGORY_CRITERIA_LENGTH, `Criteria must be less than ${MAX_CATEGORY_CRITERIA_LENGTH} characters`),
  color: z.enum(["blue", "green", "red", "yellow", "purple", "pink", "indigo", "gray"]),
  icon: z.string().optional(),
  tags: z.array(z.string()).min(1, "At least one tag is required"),
});
```

### Component Implementation:
```typescript
"use client";

import React from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { Loader2, Plus, Save } from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Form,
  FormControl,
  FormDescription,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { useAppStore } from "@/store";
import { Category, CategoryColor } from "@/types";
import { categoryFormSchema, CategoryFormData } from "./validation";

export function CategoryForm({ category, isOpen, onClose, onSuccess }: CategoryFormProps) {
  const { createCategory, updateCategory } = useAppStore();
  const [isSubmitting, setIsSubmitting] = React.useState(false);

  const form = useForm<CategoryFormData>({
    resolver: zodResolver(categoryFormSchema),
    defaultValues: {
      name: category?.name || "",
      description: category?.description || "",
      criteria: category?.criteria || "",
      color: category?.color || "blue",
      icon: category?.icon || "",
      tags: category?.tags || [],
    },
  });

  const isEditMode = Boolean(category);

  React.useEffect(() => {
    if (category) {
      form.reset({
        name: category.name,
        description: category.description,
        criteria: category.criteria,
        color: category.color,
        icon: category.icon || "",
        tags: category.tags || [],
      });
    } else {
      form.reset({
        name: "",
        description: "",
        criteria: "",
        color: "blue",
        icon: "",
        tags: [],
      });
    }
  }, [category, form]);

  const onSubmit = async (data: CategoryFormData) => {
    setIsSubmitting(true);
    try {
      if (isEditMode && category) {
        await updateCategory({
          id: category.id,
          updates: data,
        });
        onSuccess?.(category);
      } else {
        const newCategoryId = await createCategory(data);
        const newCategory = useAppStore.getState().getCategoryById(newCategoryId);
        if (newCategory) {
          onSuccess?.(newCategory);
        }
      }
      form.reset();
      onClose();
    } catch (error) {
      console.error("Failed to save category:", error);
      // Error handling will be implemented in TASK_003_006
    } finally {
      setIsSubmitting(false);
    }
  };

  const handleClose = () => {
    form.reset();
    onClose();
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="sm:max-w-[425px]">
        <DialogHeader>
          <DialogTitle>
            {isEditMode ? "Edit Category" : "Create New Category"}
          </DialogTitle>
          <DialogDescription>
            {isEditMode 
              ? "Update the category details below."
              : "Create a new category to organize your learning content."
            }
          </DialogDescription>
        </DialogHeader>
        
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
            {/* Category Name */}
            <FormField
              control={form.control}
              name="name"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Category Name</FormLabel>
                  <FormControl>
                    <Input
                      placeholder="e.g., React Development"
                      {...field}
                    />
                  </FormControl>
                  <FormDescription>
                    A clear, descriptive name for your category.
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Description */}
            <FormField
              control={form.control}
              name="description"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Description</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="Describe what kind of content this category will contain..."
                      className="resize-none"
                      {...field}
                    />
                  </FormControl>
                  <FormDescription>
                    Help others understand what this category is for.
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Search Criteria */}
            <FormField
              control={form.control}
              name="criteria"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Search Criteria</FormLabel>
                  <FormControl>
                    <Textarea
                      placeholder="Keywords and criteria for AI to categorize videos..."
                      className="resize-none"
                      {...field}
                    />
                  </FormControl>
                  <FormDescription>
                    Define criteria for AI to automatically categorize videos.
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Color Selection - Will be enhanced in TASK_003_004 */}
            <FormField
              control={form.control}
              name="color"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>Color</FormLabel>
                  <FormControl>
                    <select
                      {...field}
                      className="w-full p-2 border rounded-md"
                    >
                      <option value="blue">Blue</option>
                      <option value="green">Green</option>
                      <option value="red">Red</option>
                      <option value="yellow">Yellow</option>
                      <option value="purple">Purple</option>
                      <option value="pink">Pink</option>
                      <option value="indigo">Indigo</option>
                      <option value="gray">Gray</option>
                    </select>
                  </FormControl>
                  <FormDescription>
                    Choose a color to identify this category.
                  </FormDescription>
                  <FormMessage />
                </FormItem>
              )}
            />

            {/* Form Actions */}
            <div className="flex justify-end space-x-2 pt-4">
              <Button
                type="button"
                variant="outline"
                onClick={handleClose}
                disabled={isSubmitting}
              >
                Cancel
              </Button>
              <Button
                type="submit"
                disabled={isSubmitting}
                className="min-w-[100px]"
              >
                {isSubmitting ? (
                  <>
                    <Loader2 className="mr-2 h-4 w-4 animate-spin" />
                    Saving...
                  </>
                ) : (
                  <>
                    {isEditMode ? (
                      <>
                        <Save className="mr-2 h-4 w-4" />
                        Update
                      </>
                    ) : (
                      <>
                        <Plus className="mr-2 h-4 w-4" />
                        Create
                      </>
                    )}
                  </>
                )}
              </Button>
            </div>
          </form>
        </Form>
      </DialogContent>
    </Dialog>
  );
}
```

## shadcn/ui Components Required
- `npx shadcn@latest add dialog`
- `npx shadcn@latest add form`
- `npx shadcn@latest add input`
- `npx shadcn@latest add textarea`
- `npx shadcn@latest add button`

## Files to Create/Modify
- `src/components/ui/CategoryForm.tsx` - Main component
- `src/lib/validations/category.ts` - Validation schemas

## Dependencies
- TASK_002 (Category store implementation)
- shadcn/ui components
- react-hook-form
- @hookform/resolvers
- zod
- lucide-react

## Context7 Best Practices
- Use controlled components with react-hook-form
- Implement proper form validation with Zod
- Handle loading states appropriately
- Use TypeScript for type safety
- Follow shadcn/ui patterns for consistent styling
- Implement proper error boundaries

## Responsive Design
- Mobile-first approach with responsive dialog
- Touch-friendly input sizes
- Proper keyboard navigation
- Accessible form labels and descriptions

## Testing Requirements
- Test form validation with valid/invalid data
- Verify create vs edit mode functionality
- Test form reset on close/cancel
- Validate integration with Zustand store
- Test responsive behavior on different screen sizes

## Implementation Notes
- Form should reset on successful submission
- Handle both controlled and uncontrolled input states
- Implement optimistic UI updates where appropriate
- Use proper ARIA labels for accessibility
- Follow existing project styling patterns

## Edge Cases
- Handle empty form submissions
- Validate against duplicate category names
- Handle network errors gracefully
- Manage form state during async operations
- Handle component unmounting during submission

## Definition of Done
- CategoryForm component fully functional
- Both create and edit modes working
- Form validation implemented and tested
- Integration with Zustand store complete
- Responsive design verified
- TypeScript types properly defined
- Component follows shadcn/ui patterns
- Accessibility requirements met 