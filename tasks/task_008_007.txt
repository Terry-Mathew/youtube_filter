TASK_008_007: Implement search result caching

## Overview
Add client-side caching for YouTube API results to reduce API calls and improve performance with intelligent cache management.

## Objectives
- Implement intelligent caching for search results
- Reduce YouTube API quota usage
- Improve application performance and user experience
- Add cache invalidation and management strategies
- Implement persistent caching across sessions

## Dependencies
- TASK_008_003 (YouTube API integration with SearchResults)

## Files to Modify
- src/lib/search-cache.ts
- src/hooks/useVideoSearch.ts

## Implementation Details

### 1. Create Search Cache System

```typescript
// src/lib/search-cache.ts
export interface CacheEntry<T> {
  data: T;
  timestamp: number;
  expiresAt: number;
  accessCount: number;
  lastAccessed: number;
  searchParams: SearchParams;
}

export interface SearchParams {
  query: string;
  categoryId?: string;
  sortBy?: string;
  maxResults?: number;
  filters?: Record<string, any>;
}

export class SearchCache {
  private cache = new Map<string, CacheEntry<VideoSearchResult>>();
  private maxSize = 50; // Maximum cache entries
  private defaultTTL = 1000 * 60 * 15; // 15 minutes

  generateKey(params: SearchParams): string {
    const normalized = {
      query: params.query?.toLowerCase().trim(),
      categoryId: params.categoryId,
      sortBy: params.sortBy || 'relevance',
      maxResults: params.maxResults || 20,
      filters: JSON.stringify(params.filters || {})
    };
    return btoa(JSON.stringify(normalized));
  }

  set(key: string, data: VideoSearchResult, ttl?: number): void {
    const now = Date.now();
    const expiresAt = now + (ttl || this.defaultTTL);

    // Clean up old entries if cache is full
    if (this.cache.size >= this.maxSize) {
      this.evictLeastRecentlyUsed();
    }

    this.cache.set(key, {
      data,
      timestamp: now,
      expiresAt,
      accessCount: 1,
      lastAccessed: now,
      searchParams: this.parseKeyToParams(key)
    });

    this.persistToStorage();
  }

  get(key: string): VideoSearchResult | null {
    const entry = this.cache.get(key);
    if (!entry) return null;

    const now = Date.now();
    
    // Check if expired
    if (now > entry.expiresAt) {
      this.cache.delete(key);
      this.persistToStorage();
      return null;
    }

    // Update access statistics
    entry.accessCount++;
    entry.lastAccessed = now;

    return entry.data;
  }

  private evictLeastRecentlyUsed(): void {
    let lruKey = '';
    let lruTime = Date.now();

    for (const [key, entry] of this.cache) {
      if (entry.lastAccessed < lruTime) {
        lruTime = entry.lastAccessed;
        lruKey = key;
      }
    }

    if (lruKey) {
      this.cache.delete(lruKey);
    }
  }

  invalidateByCategory(categoryId: string): void {
    for (const [key, entry] of this.cache) {
      if (entry.searchParams.categoryId === categoryId) {
        this.cache.delete(key);
      }
    }
    this.persistToStorage();
  }

  clear(): void {
    this.cache.clear();
    localStorage.removeItem('youtube-search-cache');
  }

  private persistToStorage(): void {
    try {
      const serializedCache = JSON.stringify(Array.from(this.cache.entries()));
      localStorage.setItem('youtube-search-cache', serializedCache);
    } catch (error) {
      console.warn('Failed to persist cache to localStorage:', error);
    }
  }

  loadFromStorage(): void {
    try {
      const stored = localStorage.getItem('youtube-search-cache');
      if (stored) {
        const entries = JSON.parse(stored);
        this.cache = new Map(entries);
        
        // Clean expired entries on load
        this.cleanExpiredEntries();
      }
    } catch (error) {
      console.warn('Failed to load cache from localStorage:', error);
      this.clear();
    }
  }

  private cleanExpiredEntries(): void {
    const now = Date.now();
    for (const [key, entry] of this.cache) {
      if (now > entry.expiresAt) {
        this.cache.delete(key);
      }
    }
  }

  getStats() {
    const now = Date.now();
    const entries = Array.from(this.cache.values());
    
    return {
      totalEntries: this.cache.size,
      validEntries: entries.filter(e => now <= e.expiresAt).length,
      expiredEntries: entries.filter(e => now > e.expiresAt).length,
      averageAge: entries.reduce((sum, e) => sum + (now - e.timestamp), 0) / entries.length,
      totalAccesses: entries.reduce((sum, e) => sum + e.accessCount, 0)
    };
  }
}

// Singleton instance
export const searchCache = new SearchCache();
```

### 2. Enhanced useVideoSearch with Caching

```typescript
// Update src/hooks/useVideoSearch.ts
import { searchCache } from '../lib/search-cache';

export const useVideoSearch = () => {
  const [videos, setVideos] = useState<VideoUI[]>([]);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [cacheHit, setCacheHit] = useState(false);
  const [searchParams, setSearchParams] = useState<SearchParams | null>(null);

  // Initialize cache on mount
  useEffect(() => {
    searchCache.loadFromStorage();
  }, []);

  const searchVideos = useCallback(async (params: SearchParams) => {
    const cacheKey = searchCache.generateKey(params);
    
    // Check cache first
    const cachedResult = searchCache.get(cacheKey);
    if (cachedResult) {
      setVideos(cachedResult.videos);
      setCacheHit(true);
      setError(null);
      return;
    }

    // Cache miss - fetch from API
    setCacheHit(false);
    setLoading(true);
    setError(null);
    setSearchParams(params);

    try {
      const result = await youtubeService.searchVideos(params);
      
      // Cache the result
      searchCache.set(cacheKey, result);
      
      setVideos(result.videos);
    } catch (err) {
      setError('Failed to search videos');
      setVideos([]);
    } finally {
      setLoading(false);
    }
  }, []);

  const invalidateCache = useCallback((categoryId?: string) => {
    if (categoryId) {
      searchCache.invalidateByCategory(categoryId);
    } else {
      searchCache.clear();
    }
  }, []);

  return {
    videos,
    loading,
    error,
    cacheHit,
    searchVideos,
    invalidateCache,
    cacheStats: searchCache.getStats()
  };
};
```

### 3. Smart Cache Strategies

#### Cache Warmup for Popular Searches
```typescript
const useCacheWarmup = () => {
  const popularSearches = [
    { query: 'javascript tutorial', categoryId: 'programming' },
    { query: 'react hooks', categoryId: 'programming' },
    { query: 'python basics', categoryId: 'programming' }
  ];

  const warmupCache = useCallback(async () => {
    for (const search of popularSearches) {
      const cacheKey = searchCache.generateKey(search);
      if (!searchCache.get(cacheKey)) {
        try {
          const result = await youtubeService.searchVideos(search);
          searchCache.set(cacheKey, result, 1000 * 60 * 30); // 30 minutes
        } catch (error) {
          console.warn('Cache warmup failed for:', search);
        }
      }
    }
  }, []);

  useEffect(() => {
    // Warmup cache on idle
    const timeoutId = setTimeout(warmupCache, 2000);
    return () => clearTimeout(timeoutId);
  }, [warmupCache]);
};
```

#### Predictive Caching
```typescript
const usePredictiveCache = (currentSearch: string) => {
  const getSuggestions = useCallback((query: string) => {
    // Generate similar search queries
    const suggestions = [
      `${query} tutorial`,
      `${query} advanced`,
      `${query} beginner`,
      `learn ${query}`,
      `${query} explained`
    ];
    return suggestions;
  }, []);

  const prefetchSuggestions = useCallback(async (query: string) => {
    const suggestions = getSuggestions(query);
    
    for (const suggestion of suggestions) {
      const params = { query: suggestion, maxResults: 10 };
      const cacheKey = searchCache.generateKey(params);
      
      if (!searchCache.get(cacheKey)) {
        try {
          const result = await youtubeService.searchVideos(params);
          searchCache.set(cacheKey, result, 1000 * 60 * 10); // 10 minutes
        } catch (error) {
          // Ignore prefetch errors
        }
      }
    }
  }, [getSuggestions]);

  useEffect(() => {
    if (currentSearch && currentSearch.length > 3) {
      const debounced = setTimeout(() => {
        prefetchSuggestions(currentSearch);
      }, 1000);
      
      return () => clearTimeout(debounced);
    }
  }, [currentSearch, prefetchSuggestions]);
};
```

### 4. Cache Management UI Component

```typescript
// src/components/CacheManager.tsx
export const CacheManager: React.FC = () => {
  const [stats, setStats] = useState(searchCache.getStats());
  
  useEffect(() => {
    const interval = setInterval(() => {
      setStats(searchCache.getStats());
    }, 5000);
    
    return () => clearInterval(interval);
  }, []);

  const handleClearCache = () => {
    searchCache.clear();
    setStats(searchCache.getStats());
  };

  return (
    <div className="cache-manager p-4 bg-gray-50 rounded-lg">
      <h3 className="text-lg font-semibold mb-3">Cache Statistics</h3>
      
      <div className="grid grid-cols-2 gap-4 mb-4">
        <div className="stat">
          <div className="text-sm text-gray-600">Total Entries</div>
          <div className="text-xl font-bold">{stats.totalEntries}</div>
        </div>
        <div className="stat">
          <div className="text-sm text-gray-600">Valid Entries</div>
          <div className="text-xl font-bold text-green-600">{stats.validEntries}</div>
        </div>
        <div className="stat">
          <div className="text-sm text-gray-600">Total Accesses</div>
          <div className="text-xl font-bold">{stats.totalAccesses}</div>
        </div>
        <div className="stat">
          <div className="text-sm text-gray-600">Cache Hit Rate</div>
          <div className="text-xl font-bold">
            {stats.totalAccesses > 0 ? 
              Math.round((stats.totalAccesses / (stats.totalAccesses + stats.validEntries)) * 100) 
              : 0}%
          </div>
        </div>
      </div>

      <button
        onClick={handleClearCache}
        className="px-4 py-2 bg-red-500 text-white rounded hover:bg-red-600"
      >
        Clear Cache
      </button>
    </div>
  );
};
```

### 5. Cache Performance Monitoring

```typescript
// src/lib/cache-analytics.ts
export class CacheAnalytics {
  private hits = 0;
  private misses = 0;
  private startTime = Date.now();

  recordHit(): void {
    this.hits++;
  }

  recordMiss(): void {
    this.misses++;
  }

  getHitRate(): number {
    const total = this.hits + this.misses;
    return total > 0 ? this.hits / total : 0;
  }

  getStats() {
    return {
      hits: this.hits,
      misses: this.misses,
      hitRate: this.getHitRate(),
      totalRequests: this.hits + this.misses,
      uptime: Date.now() - this.startTime
    };
  }

  reset(): void {
    this.hits = 0;
    this.misses = 0;
    this.startTime = Date.now();
  }
}

export const cacheAnalytics = new CacheAnalytics();
```

## Performance Considerations

### Storage Optimization
- Use compression for large cache entries
- Implement cache size limits
- Clean up expired entries regularly
- Monitor memory usage

### Network Optimization
- Batch similar requests
- Implement request deduplication
- Use partial cache updates for pagination
- Optimize cache key generation

### User Experience
- Show cache status indicators
- Provide manual cache refresh options
- Display loading states appropriately
- Handle cache errors gracefully

## Acceptance Criteria
- [ ] Search results are cached efficiently
- [ ] Cache hit rate is optimized (target >70%)
- [ ] API quota usage is reduced significantly
- [ ] Cache invalidation works correctly
- [ ] Performance improvements are measurable
- [ ] Cache persists across browser sessions
- [ ] Memory usage stays within acceptable limits

## Testing Requirements
- Unit tests for cache operations
- Performance tests for cache efficiency
- Integration tests for search flow
- Cache invalidation scenario testing
- Memory leak testing for long sessions

## Security Considerations
- Sanitize cached data
- Implement cache size limits
- Prevent cache poisoning
- Handle sensitive search queries appropriately

## Monitoring and Analytics
- Track cache hit rates
- Monitor API quota savings
- Measure performance improvements
- Alert on cache failures
- Generate usage reports 