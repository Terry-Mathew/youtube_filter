# TASK_013: Implement user authentication with Supabase

## Overview
Add user signup, login, and session management to replace localStorage with secure user-based data storage.

## Acceptance Criteria
- [ ] Set up Supabase Auth configuration
- [ ] Create authentication UI components
- [ ] Implement signup/login/logout functionality
- [ ] Add session management and persistence
- [ ] Create protected route middleware
- [ ] Add user profile management
- [ ] Implement password reset functionality

## Technical Requirements

### Auth Components:
- Login/Signup forms
- Protected route wrapper
- User profile dropdown
- Password reset flow

### Supabase Auth Setup:
```typescript
// lib/supabase.ts
import { createClient } from '@supabase/supabase-js';

export const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
);

// Auth helpers
export const signUp = async (email: string, password: string) => {
  return await supabase.auth.signUp({ email, password });
};

export const signIn = async (email: string, password: string) => {
  return await supabase.auth.signInWithPassword({ email, password });
};

export const signOut = async () => {
  return await supabase.auth.signOut();
};
```

## Files to Create
- `src/components/Auth.tsx` - Authentication components
- `lib/supabase.ts` - Supabase client and auth helpers
- `src/hooks/useAuth.ts` - Authentication hook
- `src/middleware.ts` - Route protection middleware

## Dependencies
- TASK_012 (Supabase project must be set up)

## Definition of Done
- User authentication fully functional
- Session management working
- Protected routes implemented
- Auth UI components integrated
- User data properly scoped by authentication 