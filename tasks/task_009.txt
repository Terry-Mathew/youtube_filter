# TASK_009: Implement transcript extraction service

## Overview
Create a backend service for extracting YouTube video transcripts using youtube-transcript-api or equivalent Node.js solution.

## Acceptance Criteria
- [ ] Implement transcript extraction for YouTube videos
- [ ] Support auto-generated and manual captions
- [ ] Handle multiple languages
- [ ] Add transcript cleaning and preprocessing
- [ ] Create fallback handling for videos without transcripts
- [ ] Add caching for extracted transcripts
- [ ] Implement transcript quality scoring

## Technical Requirements

### Transcript Extractor (`lib/transcript-extractor.ts`):
```typescript
export interface TranscriptSegment {
  start: number;
  duration: number;
  text: string;
}

export interface TranscriptResult {
  videoId: string;
  language: string;
  segments: TranscriptSegment[];
  fullText: string;
  isAutoGenerated: boolean;
  quality: 'high' | 'medium' | 'low';
}

export class TranscriptExtractor {
  async extractTranscript(videoId: string, language?: string): Promise<TranscriptResult | null> {
    try {
      // Use youtube-transcript library or implement fetching logic
      const transcript = await this.fetchTranscriptData(videoId, language);
      
      if (!transcript) return null;

      const fullText = transcript.segments.map(s => s.text).join(' ');
      const quality = this.assessTranscriptQuality(fullText);

      return {
        videoId,
        language: transcript.language,
        segments: transcript.segments,
        fullText: this.cleanTranscript(fullText),
        isAutoGenerated: transcript.isAutoGenerated,
        quality
      };
    } catch (error) {
      console.error(`Failed to extract transcript for ${videoId}:`, error);
      return null;
    }
  }

  private cleanTranscript(text: string): string {
    return text
      .replace(/\[.*?\]/g, '') // Remove [Music], [Applause], etc.
      .replace(/\s+/g, ' ') // Normalize whitespace
      .trim();
  }

  private assessTranscriptQuality(text: string): 'high' | 'medium' | 'low' {
    const wordCount = text.split(' ').length;
    const avgWordsPerMinute = wordCount / 10; // Assume 10 min video

    if (avgWordsPerMinute > 120) return 'high';
    if (avgWordsPerMinute > 60) return 'medium';
    return 'low';
  }
}
```

### API Route (`pages/api/videos/[id]/transcript.ts`):
```typescript
import type { NextApiRequest, NextApiResponse } from 'next';
import { TranscriptExtractor } from '../../../../lib/transcript-extractor';
import { apiResponse, ApiError } from '../../utils/response';

export default async function handler(req: NextApiRequest, res: NextApiResponse) {
  if (req.method !== 'GET') {
    throw new ApiError(405, 'Method not allowed');
  }

  try {
    const { id } = req.query;
    const { language } = req.query;

    if (!id || typeof id !== 'string') {
      throw new ApiError(400, 'Video ID is required');
    }

    const extractor = new TranscriptExtractor();
    const transcript = await extractor.extractTranscript(
      id, 
      language as string
    );

    if (!transcript) {
      throw new ApiError(404, 'No transcript available for this video');
    }

    return apiResponse.success(res, { transcript });
  } catch (error) {
    return apiResponse.error(res, error);
  }
}
```

## Files to Create
- `lib/transcript-extractor.ts` - Main transcript extraction service
- `pages/api/videos/[id]/transcript.ts` - API endpoint for transcript retrieval

## Dependencies
- TASK_007 (YouTube API integration must exist)

## Implementation Notes
- Use `youtube-transcript` npm package or build custom fetcher
- Implement caching to avoid repeated extractions
- Handle rate limiting for transcript requests
- Support fallback languages if primary not available

## Definition of Done
- Transcript extraction service implemented and tested
- API endpoint functional
- Error handling for missing transcripts
- Multiple language support working
- Transcript cleaning and quality assessment functional 