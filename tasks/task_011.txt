# TASK_011: Enhance VideoCard component with AI insights

## Overview
Extend existing VideoCard to display AI-generated insights and improved relevance scores from content analysis.

## Acceptance Criteria
- [ ] Add AI insights display to VideoCard
- [ ] Show relevance and quality scores
- [ ] Display key takeaways from analysis
- [ ] Add analysis confidence indicators
- [ ] Implement loading states for analysis
- [ ] Handle cases where analysis is unavailable

## Technical Requirements

### Enhanced VideoCard Component:
```typescript
interface VideoCardProps {
  video: Video;
  index: number;
  showAnalysis?: boolean;
}

const VideoCard: React.FC<VideoCardProps> = ({ 
  video, 
  index, 
  showAnalysis = true 
}) => {
  const { analysis } = video;
  const hasAnalysis = analysis && analysis.confidence_level > 50;

  return (
    <motion.div className="bg-white rounded-lg shadow-md overflow-hidden">
      {/* Existing video display code */}
      
      {showAnalysis && hasAnalysis && (
        <div className="px-6 py-4 border-t border-gray-100">
          <div className="flex items-center justify-between mb-3">
            <h4 className="text-sm font-medium text-gray-900">AI Analysis</h4>
            <div className="flex items-center space-x-2">
              <ScoreIndicator 
                label="Relevance" 
                score={analysis.relevance_score} 
                color="blue" 
              />
              <ScoreIndicator 
                label="Quality" 
                score={analysis.quality_score} 
                color="green" 
              />
            </div>
          </div>
          
          {analysis.summary && (
            <p className="text-sm text-gray-600 mb-3">{analysis.summary}</p>
          )}
          
          {analysis.key_insights.length > 0 && (
            <div>
              <h5 className="text-xs font-medium text-gray-700 mb-2">Key Insights</h5>
              <ul className="space-y-1">
                {analysis.key_insights.slice(0, 3).map((insight, idx) => (
                  <li key={idx} className="text-xs text-gray-600 flex items-start">
                    <span className="w-1 h-1 bg-gray-400 rounded-full mt-1.5 mr-2 flex-shrink-0" />
                    {insight}
                  </li>
                ))}
              </ul>
            </div>
          )}
          
          <div className="mt-3 flex items-center justify-between text-xs text-gray-500">
            <span>Confidence: {analysis.confidence_level}%</span>
            <span>{formatDistanceToNow(new Date(analysis.analyzed_at), { addSuffix: true })}</span>
          </div>
        </div>
      )}
    </motion.div>
  );
};

const ScoreIndicator: React.FC<{
  label: string;
  score: number;
  color: 'blue' | 'green' | 'yellow' | 'red';
}> = ({ label, score, color }) => {
  const getColorClasses = (color: string, score: number) => {
    const intensity = score >= 80 ? '600' : score >= 60 ? '500' : '400';
    return {
      blue: `bg-blue-${intensity} text-blue-50`,
      green: `bg-green-${intensity} text-green-50`,
      yellow: `bg-yellow-${intensity} text-yellow-50`,
      red: `bg-red-${intensity} text-red-50`,
    }[color];
  };

  return (
    <div className={`px-2 py-1 rounded-full text-xs font-medium ${getColorClasses(color, score)}`}>
      {label}: {score}
    </div>
  );
};
```

## Files to Modify
- `src/components/VideoCard.tsx` - Add AI insights display

## Dependencies
- TASK_010 (AI analysis must be available)
- TASK_008 (Video fetching integration must exist)

## Definition of Done
- VideoCard displays AI insights when available
- Score indicators working correctly
- Loading and empty states handled
- Component remains performant with new features 