# TASK_012: Set up Supabase project and database schema

## Overview
Create production database structure for users, categories, videos, and analysis data using Supabase.

## Acceptance Criteria
- [ ] Set up Supabase project and configuration
- [ ] Design and implement database schema
- [ ] Set up Row Level Security (RLS) policies
- [ ] Create database functions and triggers
- [ ] Set up authentication configuration
- [ ] Add database indexes for performance
- [ ] Create migration scripts

## Technical Requirements

### Database Schema:
```sql
-- Users table (managed by Supabase Auth)
-- Categories table
CREATE TABLE categories (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  name VARCHAR(100) NOT NULL,
  keywords TEXT[] NOT NULL DEFAULT '{}',
  settings JSONB DEFAULT '{
    "min_relevance_score": 70,
    "max_videos": 100,
    "update_frequency": "manual",
    "content_types": ["tutorial", "educational"]
  }',
  video_count INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id, name)
);

-- Videos table
CREATE TABLE videos (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  youtube_id VARCHAR(50) UNIQUE NOT NULL,
  title TEXT NOT NULL,
  channel_title VARCHAR(200),
  channel_id VARCHAR(50),
  thumbnail_url TEXT,
  published_at TIMESTAMP WITH TIME ZONE,
  description TEXT,
  view_count BIGINT DEFAULT 0,
  duration VARCHAR(20),
  language VARCHAR(10) DEFAULT 'en',
  transcript TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Video analysis table
CREATE TABLE video_analyses (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  video_id UUID REFERENCES videos(id) ON DELETE CASCADE,
  category_id UUID REFERENCES categories(id) ON DELETE CASCADE,
  relevance_score INTEGER CHECK (relevance_score >= 0 AND relevance_score <= 100),
  quality_score INTEGER CHECK (quality_score >= 0 AND quality_score <= 100),
  key_insights TEXT[] DEFAULT '{}',
  summary TEXT,
  confidence_level INTEGER CHECK (confidence_level >= 0 AND confidence_level <= 100),
  analyzed_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(video_id, category_id)
);

-- Category videos junction table
CREATE TABLE category_videos (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  category_id UUID REFERENCES categories(id) ON DELETE CASCADE,
  video_id UUID REFERENCES videos(id) ON DELETE CASCADE,
  analysis_id UUID REFERENCES video_analyses(id) ON DELETE SET NULL,
  added_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(category_id, video_id)
);

-- API usage tracking
CREATE TABLE api_usage (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE,
  date DATE DEFAULT CURRENT_DATE,
  youtube_quota_used INTEGER DEFAULT 0,
  openai_tokens_used INTEGER DEFAULT 0,
  videos_processed INTEGER DEFAULT 0,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  UNIQUE(user_id, date)
);

-- User API keys (encrypted)
CREATE TABLE user_api_keys (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  user_id UUID REFERENCES auth.users(id) ON DELETE CASCADE UNIQUE,
  youtube_api_key_encrypted TEXT,
  openai_api_key_encrypted TEXT,
  encryption_key_id VARCHAR(100),
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  last_updated TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

### RLS Policies:
```sql
-- Enable RLS
ALTER TABLE categories ENABLE ROW LEVEL SECURITY;
ALTER TABLE video_analyses ENABLE ROW LEVEL SECURITY;
ALTER TABLE category_videos ENABLE ROW LEVEL SECURITY;
ALTER TABLE api_usage ENABLE ROW LEVEL SECURITY;
ALTER TABLE user_api_keys ENABLE ROW LEVEL SECURITY;

-- Categories policies
CREATE POLICY "Users can view own categories" ON categories
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert own categories" ON categories
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Users can update own categories" ON categories
  FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete own categories" ON categories
  FOR DELETE USING (auth.uid() = user_id);

-- Similar policies for other tables...
```

### Database Functions:
```sql
-- Function to update category video count
CREATE OR REPLACE FUNCTION update_category_video_count()
RETURNS TRIGGER AS $$
BEGIN
  IF TG_OP = 'INSERT' THEN
    UPDATE categories 
    SET video_count = video_count + 1, last_updated = NOW()
    WHERE id = NEW.category_id;
    RETURN NEW;
  ELSIF TG_OP = 'DELETE' THEN
    UPDATE categories 
    SET video_count = video_count - 1, last_updated = NOW()
    WHERE id = OLD.category_id;
    RETURN OLD;
  END IF;
  RETURN NULL;
END;
$$ LANGUAGE plpgsql;

-- Trigger for category video count
CREATE TRIGGER trigger_update_category_video_count
  AFTER INSERT OR DELETE ON category_videos
  FOR EACH ROW EXECUTE FUNCTION update_category_video_count();
```

## Files to Create
- `database/schema.sql` - Complete database schema
- `database/policies.sql` - RLS policies
- `database/functions.sql` - Database functions and triggers
- `lib/supabase.ts` - Supabase client configuration

## Dependencies
- TASK_001 (TypeScript interfaces must match database schema)

## Definition of Done
- Supabase project created and configured
- Database schema implemented and tested
- RLS policies working correctly
- Database functions and triggers operational
- Performance indexes created
- Migration scripts available 