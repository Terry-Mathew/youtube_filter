export interface TranscriptSegment {
  start: number;
  duration: number;
  text: string;
}

export interface TranscriptLanguage {
  language: string;
  languageName?: string;
  isAutoGenerated: boolean;
}

export interface RawTranscriptData {
  videoId: string;
  language: string;
  isAutoGenerated: boolean;
  segments: TranscriptSegment[];
  fullText: string;
  quality: 'high' | 'medium' | 'low';
  extractedAt: string;
  source: 'youtube-captions' | 'youtube-transcript';
}

export interface TranscriptExtractionOptions {
  language?: string;
  fallbackLanguages?: string[];
  includeTimestamps?: boolean;
  maxRetries?: number;
}

export interface TranscriptAvailability {
  available: boolean;
  source: 'cache' | 'youtube' | 'none';
  languages: Array<{
    code: string;
    name: string;
    isAutoGenerated: boolean;
  }>;
  quality: 'high' | 'medium' | 'low' | 'unknown';
  error?: string;
}

export interface ProcessingOptions {
  cleanText?: boolean;
  mergeShortSegments?: boolean;
  minSegmentLength?: number;
  removeMusic?: boolean;
  removeSoundEffects?: boolean;
}

export interface TranscriptForAnalysis {
  videoId: string;
  language: string;
  text: string;
  segments: TranscriptSegment[];
  wordCount: number;
  estimatedReadTime: number; // in minutes
  quality: 'high' | 'medium' | 'low';
  processingFlags: {
    cleaned: boolean;
    merged: boolean;
    filtered: boolean;
  };
}

export interface TranscriptMetadata {
  extractedAt: string;
  quality: 'high' | 'medium' | 'low';
  language: string;
  isAutoGenerated: boolean;
  segmentCount: number;
  totalDuration: number;
  wordCount: number;
  processingVersion: string;
}

export type YouTubeVideoId = string;

export interface TranscriptExtractionResult {
  success: boolean;
  data?: RawTranscriptData;
  error?: string;
  retryCount?: number;
} 