// =============================================================================
// YouTube Filter - Core Type Definitions
// =============================================================================

/**
 * Branded type utilities for type-safe IDs
 */
declare const __brand: unique symbol;
type Brand<T, TBrand> = T & { [__brand]: TBrand };

// =============================================================================
// Branded ID Types
// =============================================================================

/**
 * Unique identifier for categories
 */
export type CategoryId = Brand<string, 'CategoryId'>;

/**
 * Unique identifier for videos
 */
export type VideoId = Brand<string, 'VideoId'>;

/**
 * Unique identifier for users
 */
export type UserId = Brand<string, 'UserId'>;

/**
 * Unique identifier for API usage records
 */
export type ApiUsageId = Brand<string, 'ApiUsageId'>;

/**
 * Unique identifier for analysis records
 */
export type AnalysisId = Brand<string, 'AnalysisId'>;

// =============================================================================
// Utility Types
// =============================================================================

/**
 * Difficulty levels for educational content
 */
export type DifficultyLevel = 'beginner' | 'intermediate' | 'advanced';

/**
 * View modes for category display
 */
export type ViewMode = 'grid' | 'list';

/**
 * Supported API services
 */
export type ApiService = 'youtube' | 'openai';

/**
 * Category color options for UI theming
 */
export type CategoryColor = 
  | 'blue' | 'green' | 'purple' | 'pink' | 'yellow' 
  | 'red' | 'indigo' | 'gray' | 'orange' | 'teal';

/**
 * Video quality indicators
 */
export type VideoQuality = 'low' | 'medium' | 'high' | 'excellent';

/**
 * Analysis confidence levels
 */
export type ConfidenceLevel = 'low' | 'medium' | 'high';

// =============================================================================
// Core Interfaces
// =============================================================================

/**
 * Main category interface for organizing and filtering videos
 * 
 * Categories serve as the primary organizational unit for content curation,
 * allowing users to define specific criteria for video classification.
 */
export interface Category {
  /** Unique identifier for the category */
  readonly id: CategoryId;
  
  /** Human-readable name for the category */
  name: string;
  
  /** Detailed description of the category's purpose */
  description: string;
  
  /** AI-readable criteria for video classification */
  criteria: string;
  
  /** Optional color theme for UI display */
  color?: CategoryColor;
  
  /** Optional icon identifier for visual representation */
  icon?: string;
  
  /** Whether the category is currently active for classification */
  isActive: boolean;
  
  /** Timestamp when the category was created */
  readonly createdAt: Date;
  
  /** Timestamp when the category was last modified */
  updatedAt: Date;
  
  /** ID of the user who owns this category */
  readonly userId: UserId;
  
  /** Cached count of videos in this category (optional for performance) */
  videoCount?: number;
  
  /** Searchable tags associated with the category */
  tags?: readonly string[];
  
  /** Sort order for display in UI */
  sortOrder?: number;
  
  /** Whether this category was created by AI suggestion */
  isAiSuggested?: boolean;
}

/**
 * User-specific settings for category behavior and display
 * 
 * These settings control how categories behave for individual users,
 * including automation preferences and display options.
 */
export interface CategorySettings {
  /** The category these settings apply to */
  readonly categoryId: CategoryId;
  
  /** Minimum relevance score (0-1) for auto-assignment */
  relevanceThreshold: number;
  
  /** Whether to automatically assign videos to this category */
  autoAssign: boolean;
  
  /** Whether to send notifications for new videos in this category */
  notifications: boolean;
  
  /** Display order preference for this category */
  sortOrder: number;
  
  /** Preferred view mode for videos in this category */
  viewMode: ViewMode;
  
  /** Whether to show this category in the main navigation */
  showInNavigation: boolean;
  
  /** Custom keyboard shortcut for quick access */
  keyboardShortcut?: string;
  
  /** Whether to include this category in digest emails */
  includeInDigest: boolean;
  
  /** Maximum number of videos to show from this category in feeds */
  maxVideosInFeed?: number;
  
  /** Timestamp when settings were last updated */
  readonly updatedAt: Date;
}

/**
 * AI-powered analysis results for video content
 * 
 * Contains comprehensive analysis data generated by AI services
 * to help users understand video content and relevance.
 */
export interface VideoAnalysis {
  /** Unique identifier for this analysis */
  readonly id: AnalysisId;
  
  /** The video this analysis belongs to */
  readonly videoId: VideoId;
  
  /** Optional category this analysis was generated for */
  categoryId?: CategoryId;
  
  /** Overall content quality score (0-1) */
  overallQualityScore: number;
  
  /** Relevance scores mapped by category ID */
  relevanceScores: Record<CategoryId, number>;
  
  /** Key topics and concepts identified in the video */
  keyTopics: readonly string[];
  
  /** Assessed difficulty level of the content */
  difficultyLevel: DifficultyLevel;
  
  /** AI-generated summary of the video content */
  summary: string;
  
  /** Positive aspects identified by AI */
  pros: readonly string[];
  
  /** Potential drawbacks or limitations identified */
  cons: readonly string[];
  
  /** Target audience recommendations */
  recommendedFor: readonly string[];
  
  /** Timestamp when this analysis was performed */
  readonly analysisDate: Date;
  
  /** AI confidence level in this analysis (0-1) */
  confidence: number;
  
  /** Detected language of the video content */
  detectedLanguage?: string;
  
  /** Estimated watch time value (engagement prediction) */
  engagementScore?: number;
  
  /** Whether this analysis flagged any content concerns */
  contentWarnings?: readonly string[];
  
  /** Sentiment analysis result (-1 to 1, negative to positive) */
  sentimentScore?: number;
  
  /** Estimated prerequisite knowledge required */
  prerequisites?: readonly string[];
  
  /** Related topics that might interest the viewer */
  relatedTopics?: readonly string[];
  
  /** Whether this analysis needs human review */
  requiresReview?: boolean;
  
  /** Version of the AI model used for analysis */
  modelVersion?: string;
  
  /** Processing time in milliseconds */
  processingTimeMs?: number;
}

/**
 * API usage tracking and quota management
 * 
 * Tracks consumption of external APIs to monitor costs,
 * manage quotas, and optimize usage patterns.
 */
export interface ApiUsage {
  /** Unique identifier for this usage record */
  readonly id: ApiUsageId;
  
  /** User who made the API calls */
  readonly userId: UserId;
  
  /** Which API service was used */
  service: ApiService;
  
  /** Specific API endpoint that was called */
  endpoint: string;
  
  /** Number of requests made */
  requestCount: number;
  
  /** Number of tokens consumed (for token-based APIs) */
  tokensUsed?: number;
  
  /** Estimated cost in USD */
  cost?: number;
  
  /** Date this usage occurred */
  readonly date: Date;
  
  /** Current quota limit for this service */
  quotaLimit: number;
  
  /** Remaining quota after this usage */
  quotaRemaining: number;
  
  /** Response time statistics */
  averageResponseTime?: number;
  
  /** Number of failed requests */
  errorCount?: number;
  
  /** Success rate percentage */
  successRate?: number;
  
  /** Whether usage exceeded normal patterns */
  anomalyDetected?: boolean;
  
  /** User's API key identifier (hashed for security) */
  apiKeyHash?: string;
  
  /** Billing period this usage belongs to */
  billingPeriod?: string;
  
  /** Cache hit rate for this usage period */
  cacheHitRate?: number;
  
  /** Additional metadata for debugging */
  metadata?: Record<string, unknown>;
}

// =============================================================================
// Supporting Types
// =============================================================================

/**
 * Video metadata from YouTube API
 */
export interface Video {
  /** YouTube video ID */
  readonly youtube_id: string;
  
  /** Video title */
  title: string;
  
  /** Video description */
  description: string;
  
  /** Channel name */
  channel_title: string;
  
  /** Publication date */
  published_at: string;
  
  /** Video duration in ISO 8601 format */
  duration: string;
  
  /** View count */
  view_count: number;
  
  /** Like count */
  like_count: number;
  
  /** Dislike count (if available) */
  dislike_count: number;
  
  /** Thumbnail URL */
  thumbnail_url: string;
  
  /** Video tags */
  tags?: readonly string[];
  
  /** Categories this video belongs to */
  categories?: readonly string[];
  
  /** AI analysis data */
  ai_analysis?: VideoAnalysis;
  
  /** When this video was cached locally */
  cached_at?: Date;
  
  /** Channel ID */
  channel_id?: string;
  
  /** Video language */
  language?: string;
  
  /** Whether captions are available */
  has_captions?: boolean;
  
  /** Video quality indicator */
  quality?: VideoQuality;
}

/**
 * User profile information
 */
export interface UserProfile {
  /** User's unique identifier */
  readonly id: UserId;
  
  /** Display name */
  full_name?: string;
  
  /** Email address */
  email: string;
  
  /** Profile avatar URL */
  avatar_url?: string;
  
  /** User's timezone */
  timezone?: string;
  
  /** Preferred language */
  language?: string;
  
  /** Account creation date */
  readonly created_at: Date;
  
  /** Last login timestamp */
  last_sign_in_at?: Date;
  
  /** User's API quota limits */
  api_quotas?: Record<ApiService, number>;
  
  /** Subscription status */
  subscription_status?: 'free' | 'premium' | 'enterprise';
  
  /** User preferences */
  preferences?: UserPreferences;
}

/**
 * User preferences and settings
 */
export interface UserPreferences {
  /** Theme preference */
  theme?: 'light' | 'dark' | 'system';
  
  /** Default view mode for videos */
  defaultViewMode?: ViewMode;
  
  /** Whether to enable analytics tracking */
  enableAnalytics?: boolean;
  
  /** Email notification preferences */
  emailNotifications?: boolean;
  
  /** Auto-play video previews */
  autoPlayPreviews?: boolean;
  
  /** Default relevance threshold */
  defaultRelevanceThreshold?: number;
  
  /** Number of videos per page */
  videosPerPage?: number;
  
  /** Preferred video quality */
  preferredQuality?: VideoQuality;
}

// =============================================================================
// API Response Types
// =============================================================================

/**
 * Standard API response wrapper
 */
export interface ApiResponse<T = unknown> {
  /** Whether the request was successful */
  success: boolean;
  
  /** Response data */
  data?: T;
  
  /** Error message if request failed */
  error?: string;
  
  /** Additional error details */
  details?: string;
  
  /** Response timestamp */
  timestamp: Date;
  
  /** Request ID for debugging */
  requestId?: string;
}

/**
 * Paginated response wrapper
 */
export interface PaginatedResponse<T = unknown> extends ApiResponse<T[]> {
  /** Pagination metadata */
  pagination: {
    /** Current page number */
    page: number;
    
    /** Items per page */
    limit: number;
    
    /** Total number of items */
    total: number;
    
    /** Total number of pages */
    totalPages: number;
    
    /** Whether there's a next page */
    hasNext: boolean;
    
    /** Whether there's a previous page */
    hasPrevious: boolean;
  };
}

// =============================================================================
// Utility Functions (Type Guards)
// =============================================================================

/**
 * Type guard to check if a string is a valid CategoryId
 */
export function isCategoryId(value: string): value is CategoryId {
  return typeof value === 'string' && value.length > 0;
}

/**
 * Type guard to check if a string is a valid VideoId
 */
export function isVideoId(value: string): value is VideoId {
  return typeof value === 'string' && value.length > 0;
}

/**
 * Type guard to check if a string is a valid UserId
 */
export function isUserId(value: string): value is UserId {
  return typeof value === 'string' && value.length > 0;
}

/**
 * Type guard to check if an object is a valid Category
 */
export function isCategory(obj: unknown): obj is Category {
  return (
    typeof obj === 'object' &&
    obj !== null &&
    'id' in obj &&
    'name' in obj &&
    'description' in obj &&
    'criteria' in obj &&
    'isActive' in obj &&
    'createdAt' in obj &&
    'updatedAt' in obj &&
    'userId' in obj
  );
}

/**
 * Type guard to check if an object is a valid VideoAnalysis
 */
export function isVideoAnalysis(obj: unknown): obj is VideoAnalysis {
  return (
    typeof obj === 'object' &&
    obj !== null &&
    'id' in obj &&
    'videoId' in obj &&
    'overallQualityScore' in obj &&
    'relevanceScores' in obj &&
    'keyTopics' in obj &&
    'difficultyLevel' in obj &&
    'summary' in obj &&
    'pros' in obj &&
    'cons' in obj &&
    'recommendedFor' in obj &&
    'analysisDate' in obj &&
    'confidence' in obj
  );
}

// =============================================================================
// Constants
// =============================================================================

/**
 * Available category colors
 */
export const CATEGORY_COLORS: readonly CategoryColor[] = [
  'blue', 'green', 'purple', 'pink', 'yellow',
  'red', 'indigo', 'gray', 'orange', 'teal'
] as const;

/**
 * Supported difficulty levels
 */
export const DIFFICULTY_LEVELS: readonly DifficultyLevel[] = [
  'beginner', 'intermediate', 'advanced'
] as const;

/**
 * Available view modes
 */
export const VIEW_MODES: readonly ViewMode[] = ['grid', 'list'] as const;

/**
 * Supported API services
 */
export const API_SERVICES: readonly ApiService[] = ['youtube', 'openai'] as const;

/**
 * Default relevance threshold
 */
export const DEFAULT_RELEVANCE_THRESHOLD = 0.7;

/**
 * Default videos per page
 */
export const DEFAULT_VIDEOS_PER_PAGE = 20;

/**
 * Maximum category name length
 */
export const MAX_CATEGORY_NAME_LENGTH = 100;

/**
 * Maximum category description length
 */
export const MAX_CATEGORY_DESCRIPTION_LENGTH = 500;

/**
 * Maximum category criteria length
 */
export const MAX_CATEGORY_CRITERIA_LENGTH = 1000;